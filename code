%load in data. TS are spike times in each trial. So they are not
%overwritten when the new trial is loaded, save each TS as a separate
%variable.
load Sc1_3.mat; neuron(1).spiketime = TS;
load Sc2_1.mat; neuron(2).spiketime = TS;
load Sc2_2.mat; neuron(3).spiketime = TS;
load Sc3_1.mat; neuron(4).spiketime = TS;
load Sc3_2.mat; neuron(5).spiketime = TS;
load Sc3_3.mat; neuron(6).spiketime = TS;
load Sc4_1.mat; neuron(7).spiketime = TS;
load Sc4_2.mat; neuron(8).spiketime = TS;
load Sc5_1.mat; neuron(9).spiketime = TS;
load Sc5_2.mat; neuron(10).spiketime = TS;
load Sc5_3.mat; neuron(11).spiketime = TS;
load Sc6_1.mat; neuron(12).spiketime = TS;
load Sc6_2.mat; neuron(13).spiketime = TS;
load Sc6_3.mat; neuron(14).spiketime = TS;
load TrialEvents.mat; 
%contains BaseEnd, BaseStart, BaseValid, OdorPokeIn, OdorPokeOut, 
%OdorPokeValid, OdorValveID, OdorValveOff, OdorValveOn, TrialStart, 
%WaterPokeID, WaterPokeIn, WaterPokeOut, WaterPokeValid, WaterValveID, 
%WaterValveOff, WaterValveOn.
load TrialEvents2.mat; 
%contains BaseEnd, BaseSTart, BaseValid, ChoiceDir, ChoiceLeft, 
%ChoiceMissed, ChoiceRewarded, ChoiceRight, Correct, Error, LeftCorrect, 
%LeftError, MovementDur, OdorCategory, OdorConc, OdorLeft, OdorLeftCorrect, 
%OdorLeftError, OdorPairID, OdorPokeIn, OdorPokeOut, OdorPokeValid, 
%OdorRatio, OdorRight, OdorRightCorrect, OdorRightError, OdorSampDur, 
%OdorValve ID, OdorValveOff, OdorValveOn, RewardMissed, RewardProb, 
%RightCorrect, RightError, Stimulus, TrialStart, WaterPokeIn, WaterPokeOut, 
%WaterPokeValid, WaterValveID, WaterValveOn, WaterWaitDur.

%__________________________________________________________________________

%x = TSnormal; %input to filter; spike times normalized such that begins at 0 sec
%R = cov(TS);
numTrials = 1;

%for j = 1:numTrials 
%n = length(TS);
%plot([TS; TS], [ones(n,1)*j-1; ones(n,1)*j], 'k');
ntrials = numel(neuron); % number of trials
for jj = 1:ntrials
    t       = neuron(jj).spiketime; % Spike timings in the jjth trial
    nspikes   = numel(t); % number of elemebts / spikes
    for ii = 1:nspikes % for every spike
      line([t(ii) t(ii)],[jj-0.5 jj+0.5],'Color','k'); 
      % draw a black vertical line of length 1 at time t (x) and at trial jj (y)
  end
end
xlabel('Time (ms)'); % Time is in millisecond
ylabel('Trial number');
xlim([1*10^7 1.3*10^7]);
ylim([0 14]);
figure;
plot(xPoints,yPoints,'k');

%create kalman filter
nh = 10;
ns = nh*2+nh+1;
theta = randn(ns,1);
